# Generated by ChatGPT
from ctypes import *
import sys

import numpy as np

from .load_api import load_api

api_mod = load_api("HandApi")

ERROR_CODE_MESSAGES = {
    0: "No error",
    -1: "No error",
    -4001: "COMMUNICATE_ERROR",
    -5001: "JOINT_REGIST_ERROR",  # what does REGIST mean? Register? Registration?
    -5002: "NOT_ALL_AT_OP_STATE",
}

# Enums
from enum import Enum


class HAND_JOINT_DIRECTION(Enum):
    FLEXIBLE_HAND_MOVE_UP = 0
    FLEXIBLE_HAND_MOVE_DOWN = 1


class TOUCH_SENSOR_DATA_TYPE(Enum):
    TOUCH_SENSOR_DATA_TYPE_INVALID = -1
    TOUCH_SENSOR_DATA_TYPE_RAW = 0
    TOUCH_SENSOR_DATA_TYPE_FORCE = 1


class FINGER_TYPE(Enum):
    FINGER_1 = 0  # Thumb
    FINGER_2 = 1  # Index
    FINGER_3 = 2  # Middle
    FINGER_4 = 3  # Ring
    FINGER_5 = 4  # Pinky


class HAND_JOINT_INDEX(Enum):
    INDEX_FINGER_1_ROTATE = 0
    INDEX_FINGER_1_MP_LATERAL = 1
    INDEX_FINGER_1_MP_PITCH = 2
    INDEX_FINGER_1_MP_IP = 3
    INDEX_FINGER_2_MP_LATERAL = 4
    INDEX_FINGER_2_MP_PITCH = 5
    INDEX_FINGER_2_MP_IP = 6
    INDEX_FINGER_3_MP_LATERAL = 7
    INDEX_FINGER_3_MP_PITCH = 8
    INDEX_FINGER_3_MP_IP = 9
    INDEX_FINGER_4_MP_LATERAL = 10
    INDEX_FINGER_4_MP_PITCH = 11
    INDEX_FINGER_4_MP_IP = 12
    INDEX_FINGER_5_MP_LATERAL = 13
    INDEX_FINGER_5_MP_PITCH = 14
    INDEX_FINGER_5_MP_IP = 15


class FINGER_JOINT_TYPE(Enum):
    ROTATE = 0
    MP_LATERAL = 1
    MP_PITCH = 2
    IP = 3


HAND_JOINT_INDEX_TO_FINGER_NAME = {
    HAND_JOINT_INDEX.INDEX_FINGER_1_ROTATE: (
        FINGER_TYPE.FINGER_1,
        FINGER_JOINT_TYPE.ROTATE,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_1_MP_LATERAL: (
        FINGER_TYPE.FINGER_1,
        FINGER_JOINT_TYPE.MP_LATERAL,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_1_MP_PITCH: (
        FINGER_TYPE.FINGER_1,
        FINGER_JOINT_TYPE.MP_PITCH,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_1_MP_IP: (FINGER_TYPE.FINGER_1, FINGER_JOINT_TYPE.IP),
    HAND_JOINT_INDEX.INDEX_FINGER_2_MP_LATERAL: (
        FINGER_TYPE.FINGER_2,
        FINGER_JOINT_TYPE.MP_LATERAL,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_2_MP_PITCH: (
        FINGER_TYPE.FINGER_2,
        FINGER_JOINT_TYPE.MP_PITCH,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_2_MP_IP: (FINGER_TYPE.FINGER_2, FINGER_JOINT_TYPE.IP),
    HAND_JOINT_INDEX.INDEX_FINGER_3_MP_LATERAL: (
        FINGER_TYPE.FINGER_3,
        FINGER_JOINT_TYPE.MP_LATERAL,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_3_MP_PITCH: (
        FINGER_TYPE.FINGER_3,
        FINGER_JOINT_TYPE.MP_PITCH,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_3_MP_IP: (FINGER_TYPE.FINGER_3, FINGER_JOINT_TYPE.IP),
    HAND_JOINT_INDEX.INDEX_FINGER_4_MP_LATERAL: (
        FINGER_TYPE.FINGER_4,
        FINGER_JOINT_TYPE.MP_LATERAL,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_4_MP_PITCH: (
        FINGER_TYPE.FINGER_4,
        FINGER_JOINT_TYPE.MP_PITCH,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_4_MP_IP: (FINGER_TYPE.FINGER_4, FINGER_JOINT_TYPE.IP),
    HAND_JOINT_INDEX.INDEX_FINGER_5_MP_LATERAL: (
        FINGER_TYPE.FINGER_5,
        FINGER_JOINT_TYPE.MP_LATERAL,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_5_MP_PITCH: (
        FINGER_TYPE.FINGER_5,
        FINGER_JOINT_TYPE.MP_PITCH,
    ),
    HAND_JOINT_INDEX.INDEX_FINGER_5_MP_IP: (FINGER_TYPE.FINGER_5, FINGER_JOINT_TYPE.IP),
}


class HAND_TYPE(Enum):
    FOUR_FINGERS_HAND = 0
    FIVE_FINGERS_HAND = 1


class HAND_MODE(Enum):
    POSITION = 0
    IMPEDANCE = 1
    FREEDRIVE = 2
    POSITIONTRANSMISSION = 3
    IMPEDANCETRANSMISSION = 4


class HAND_STATE(Enum):
    SERVO_ENABLE_STATE = 0
    MOVEING_STATE = 1
    ERROR_STATE = 2


class HANDSTATE(Enum):
    DISCONNECT = -1
    SERVODISABLED = 0
    ENABLESERVO = 1
    RUNNING = 2
    ERROR = 3
    NOHARDWARE = 4


# From RobotApiDef.h
class HAND_SRV_NET_ST(Structure):
    _fields_ = [
        ("SrvIp", c_char * 32),
        ("LocHeartbeatPort", c_ushort),
        ("LocRobotStatePort", c_ushort),
        ("LocSrvPort", c_ushort),
        ("LocRealtimeSrvPort", c_ushort),
    ]


FNCERRORCALLBACK = CFUNCTYPE(None, c_int, c_char_p)
FNCWARNINGCALLBACK = CFUNCTYPE(None, c_int, c_char_p)


# HandApiDef.h
class HAND_STATE_DATA(Structure):
    _fields_ = [
        ("hand_count", c_uint8),
        ("hand_mode", c_uint8),
        ("finger1_rotate_mode", c_uint8),
        ("servo_state", c_uint8),
        ("finger1_rotate_servo_state", c_uint8),
        ("perceptual_sensor_data", c_char * 540),
        ("joints_position", c_double * 16),
        ("joints_velocity", c_double * 16),
        ("joints_torque", c_double * 16),
        ("overall_joints_error", c_int32),
        ("joints_error", c_int32 * 16),
        ("finger_touch_status", c_int16),
    ]


class HAND_TRAJECTORY_STATE_DATA(Structure):
    _fields_ = [
        ("current_task_id", c_int32),
        ("task_state", c_int32),
        ("error_code", c_int32),
    ]


class HAND_ERROR_STATE_DATA(Structure):
    _fields_ = [
        ("error_id", c_int32),
        ("error_type", c_int32),
        ("error_code", c_int32),
        ("error_msg", c_char * 64),
        ("warning_id", c_int32),
        ("warning_type", c_int32),
        ("warning_code", c_int32),
        ("warning_msg", c_char * 64),
    ]


class HAND_STATE_INFO(Structure):
    _fields_ = [
        ("hand_state_data", HAND_STATE_DATA),
        ("hand_trajectory_state_data", HAND_TRAJECTORY_STATE_DATA),
        ("hand_error_state_data", HAND_ERROR_STATE_DATA),
    ]


DOUBLE_ARRAY_16 = c_double * 16
INT_ARRAY_16 = c_int32 * 16

HANDFNCSTATECALLBACK = CFUNCTYPE(None, POINTER(HAND_STATE_INFO), c_char_p)
HandCleanErrorCallback = CFUNCTYPE(None, c_int)


# convert return values
def message(ret):
    if ret >= 0:
        return True
    else:
        errorcode = getHandLastError()
        errorMessage = ERROR_CODE_MESSAGES.get(errorcode)
        callerName = "function " + sys._getframe().f_back.f_code.co_name + " fails,"
        if errorMessage is None:
            print(callerName + f"Error Code {errorcode}. (message missing!!!)")
        else:
            print(callerName + errorMessage)
        return False


# From HandCommonApi.h
def getHandLastError(ip=""):
    api_mod.getHandLastError.argtypes = [c_char_p]
    api_mod.getHandLastError.restype = c_int
    return api_mod.getHandLastError(bytes(ip.encode("utf-8")))


def initHandSrv(srv_net_st: tuple, fn_error=None, fn_warning=None, fn_state=None):
    pinfo = HAND_SRV_NET_ST()
    pinfo.SrvIp = bytes(srv_net_st[0].encode("utf-8"))
    pinfo.LocHeartbeatPort = srv_net_st[1]
    pinfo.LocRobotStatePort = srv_net_st[2]
    pinfo.LocSrvPort = srv_net_st[3]
    pinfo.LocRealtimeSrvPort = srv_net_st[4]
    api_mod.initHandSrv.restype = c_int
    api_mod.initHandSrv.argtypes = [
        POINTER(HAND_SRV_NET_ST),
        FNCERRORCALLBACK,
        FNCWARNINGCALLBACK,
        HANDFNCSTATECALLBACK,
    ]
    if fn_error is None:
        fn_error = FNCERRORCALLBACK()
    if fn_warning is None:
        fn_warning = FNCWARNINGCALLBACK()
    if fn_state is None:
        fn_state = HANDFNCSTATECALLBACK()
    ret = api_mod.initHandSrv(byref(pinfo), fn_error, fn_warning, fn_state)
    return message(ret)


def setHandPushPeriod(intPeriod, ip):
    api_mod.setHandPushPeriod.argtypes = [c_int, c_char_p]
    api_mod.setHandPushPeriod.restype = c_int
    ret = api_mod.setHandPushPeriod(intPeriod, c_char_p(ip.encode("utf-8")))
    return message(ret)


def destroyHandSrv(ip=""):
    api_mod.destroyHandSrv.argtypes = [c_char_p]
    api_mod.destroyHandSrv.restype = c_int
    ret = api_mod.destroyHandSrv(c_char_p(ip.encode("utf-8")))
    return message(ret)


def getHandNetworkTimeout(ip=""):
    disconnectTimeout = c_int()
    stopTimeout = c_int()
    api_mod.getHandNetworkTimeout.argtypes = [POINTER(c_int), POINTER(c_int), c_char_p]
    api_mod.getHandNetworkTimeout.restype = c_int
    result = api_mod.getHandNetworkTimeout(
        byref(disconnectTimeout), byref(stopTimeout), c_char_p(ip.encode("utf-8"))
    )
    return result, disconnectTimeout.value, stopTimeout.value


def setHandNetworkTimeout(disconnectTimeout, stopTimeout, ip=""):
    api_mod.setHandNetworkTimeout.argtypes = [c_int, c_int, c_char_p]
    api_mod.setHandNetworkTimeout.restype = c_int
    return api_mod.setHandNetworkTimeout(
        disconnectTimeout, stopTimeout, c_char_p(ip.encode("utf-8"))
    )


def getHandConnectTimeout(ip=""):
    api_mod.getHandConnectTimeout.argtypes = [c_char_p]
    api_mod.getHandConnectTimeout.restype = c_int
    return api_mod.getHandConnectTimeout(c_char_p(ip.encode("utf-8")))


# HandStateApi.h


def getHandJointsPosition(ip=""):
    # FIXME: this function isn't working yet. It fails to modify the input argument
    positions_array = DOUBLE_ARRAY_16()
    api_mod.getHandJointsPosition.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.getHandJointsPosition.restype = c_int
    ret = api_mod.getHandJointsPosition(positions_array, ip.encode("utf-8"))
    # Convert positions_array back to a list
    return message(ret), np.array(positions_array)


def getHandJointsVelocity(ip=""):
    velocities_array = DOUBLE_ARRAY_16()
    api_mod.getHandJointsVelocity.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.getHandJointsVelocity.restype = c_int
    ret = api_mod.getHandJointsVelocity(velocities_array, ip.encode("utf-8"))
    return message(ret), np.array(velocities_array)


def getHandJointsTorque(ip=""):
    torques_array = DOUBLE_ARRAY_16()
    api_mod.getHandJointsTorque.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.getHandJointsTorque.restype = c_int
    ret = api_mod.getHandJointsTorque(torques_array, ip.encode("utf-8"))
    return message(ret), np.array(torques_array)


def getHandJointsError(ip=""):
    errors_array = INT_ARRAY_16()
    api_mod.getHandJointsError.argtypes = [POINTER(INT_ARRAY_16), c_char_p]
    api_mod.getHandJointsError.restype = c_int
    ret = api_mod.getHandJointsError(errors_array, ip.encode("utf-8"))
    return message(ret), np.array(errors_array)


def getHandControlMode(ip=""):
    mode = c_int()
    api_mod.getHandControlMode.argtypes = [POINTER(c_int), c_char_p]
    api_mod.getHandControlMode.restype = c_int
    result = api_mod.getHandControlMode(byref(mode), ip.encode("utf-8"))
    return result, HAND_MODE(mode.value)


def getFinger1RotateControlMode(ip=""):
    mode = c_int()
    api_mod.getFinger1RotateControlMode.argtypes = [POINTER(c_int), c_char_p]
    api_mod.getFinger1RotateControlMode.restype = c_int
    result = api_mod.getFinger1RotateControlMode(byref(mode), ip.encode("utf-8"))
    return result, HAND_MODE(mode.value)


# HandControlApi.h
def setHandControlMode(type, ip=""):
    api_mod.setHandControlMode.argtypes = [c_int, c_char_p]
    api_mod.setHandControlMode.restype = c_int
    ret = api_mod.setHandControlMode(type.value, ip.encode("utf-8"))
    return message(ret)


def setFinger1RotateControlMode(type, ip=""):
    api_mod.setFinger1RotateControlMode.argtypes = [c_int, c_char_p]
    api_mod.setFinger1RotateControlMode.restype = c_int
    ret = api_mod.setFinger1RotateControlMode(type.value, ip.encode("utf-8"))
    return message(ret)


def enableHandServo(enable, ip=""):
    api_mod.enableHandServo.argtypes = [c_bool, c_char_p]
    api_mod.enableHandServo.restype = c_int
    ret = api_mod.enableHandServo(enable, ip.encode("utf-8"))
    return message(ret)


def enableFinger1RotateServo(enable, ip=""):
    api_mod.enableFinger1RotateServo.argtypes = [c_bool, c_char_p]
    api_mod.enableFinger1RotateServo.restype = c_int
    ret = api_mod.enableFinger1RotateServo(enable, ip.encode("utf-8"))
    return message(ret)


def setHandJointsImpedance(stiff, damp, ip=""):
    stiff_arr = DOUBLE_ARRAY_16(*stiff)
    damp_arr = DOUBLE_ARRAY_16(*damp)
    api_mod.setHandJointsImpedance.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.setHandJointsImpedance.restype = c_int
    ret = api_mod.setHandJointsImpedance(stiff_arr, damp_arr, ip.encode("utf-8"))
    return message(ret)


def jogHand(fingerIndex, jointIndex, direction, velPercent, accPercent, ip=""):
    api_mod.jogHand.argtypes = [
        c_int,
        c_int,
        HAND_JOINT_DIRECTION,
        c_double,
        c_double,
        c_char_p,
    ]
    api_mod.jogHand.restype = c_int
    ret = api_mod.jogHand(
        fingerIndex,
        jointIndex,
        direction.value,
        velPercent,
        accPercent,
        ip.encode("utf-8"),
    )
    return message(ret)


def moveHandJoint(fingerIndex, jointIndex, position, velPercent, accPercent, ip=""):
    api_mod.moveHandJoint.argtypes = [
        c_int,
        c_int,
        c_double,
        c_double,
        c_double,
        c_char_p,
    ]
    api_mod.moveHandJoint.restype = c_int
    ret = api_mod.moveHandJoint(
        fingerIndex, jointIndex, position, velPercent, accPercent, ip.encode("utf-8")
    )
    return message(ret)


def moveHandJoints(positions, velPercent, accPercent, ip=""):
    positions_array = DOUBLE_ARRAY_16(*positions)
    vel_array = DOUBLE_ARRAY_16(*velPercent)
    acc_array = DOUBLE_ARRAY_16(*accPercent)
    api_mod.moveHandJoints.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        POINTER(DOUBLE_ARRAY_16),
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.moveHandJoints.restype = c_int
    ret = api_mod.moveHandJoints(
        positions_array, vel_array, acc_array, ip.encode("utf-8")
    )
    return message(ret)


def moveHandJointsSync(positions, velPercent, accPercent, ip=""):
    positions_array = DOUBLE_ARRAY_16(*positions)
    api_mod.moveHandJointsSync.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        c_double,
        c_double,
        c_char_p,
    ]
    api_mod.moveHandJointsSync.restype = c_int
    ret = api_mod.moveHandJointsSync(
        positions_array, velPercent, accPercent, ip.encode("utf-8")
    )
    return message(ret)


def stopHandMove(ip=""):
    api_mod.stopHandMove.argtypes = [c_char_p]
    api_mod.stopHandMove.restype = c_int
    ret = api_mod.stopHandMove(ip.encode("utf-8"))
    return message(ret)


def getHandType(ip=""):
    type = c_int()
    api_mod.getHandType.argtypes = [POINTER(c_int), c_char_p]
    api_mod.getHandType.restype = c_int
    result = api_mod.getHandType(byref(type), ip.encode("utf-8"))
    return result, HAND_TYPE(type.value)


def clearHandError(ip=""):
    api_mod.clearHandError.argtypes = [c_char_p]
    api_mod.clearHandError.restype = c_int
    ret = api_mod.clearHandError(ip.encode("utf-8"))
    return message(ret)


def handCleanErrorAsync(ip="", callback=None):
    api_mod.handCleanErrorAsync.argtypes = [c_char_p, HandCleanErrorCallback]
    api_mod.handCleanErrorAsync.restype = c_int
    ret = api_mod.handCleanErrorAsync(
        ip.encode("utf-8"), callback if callback else HandCleanErrorCallback()
    )
    return message(ret)


def getHandJointsImpedance(ip=""):
    stiffness = DOUBLE_ARRAY_16()
    damp = DOUBLE_ARRAY_16()
    api_mod.getHandJointsImpedance.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.getHandJointsImpedance.restype = c_int
    ret = api_mod.getHandJointsImpedance(stiffness, damp, ip.encode("utf-8"))
    return message(ret), np.array(stiffness), np.array(damp)


def setHandJointsPositionRange(minPos, maxPos, ip=""):
    api_mod.setHandJointsPositionRange.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.setHandJointsPositionRange.restype = c_int
    ret = api_mod.setHandJointsPositionRange(minPos, maxPos, ip.encode("utf-8"))
    return message(ret)


def getHandJointsPositionRange(ip=""):
    minPos = DOUBLE_ARRAY_16()
    maxPos = DOUBLE_ARRAY_16()
    api_mod.getHandJointsPositionRange.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.getHandJointsPositionRange.restype = c_int
    ret = api_mod.getHandJointsPositionRange(minPos, maxPos, ip.encode("utf-8"))
    return message(ret), np.array(minPos), np.array(maxPos)


def setHandJointsMaxVelocity(maxVel, ip=""):
    api_mod.setHandJointsMaxVelocity.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.setHandJointsMaxVelocity.restype = c_int
    ret = api_mod.setHandJointsMaxVelocity(maxVel, ip.encode("utf-8"))
    return message(ret)


def getHandJointsMaxVelocity(ip=""):
    maxVel = DOUBLE_ARRAY_16()
    api_mod.getHandJointsMaxVelocity.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.getHandJointsMaxVelocity.restype = c_int
    ret = api_mod.getHandJointsMaxVelocity(maxVel, ip.encode("utf-8"))
    return message(ret), np.array(maxVel)


def setHandJointsMaxProfileVelocity(maxVel, ip=""):
    api_mod.setHandJointsMaxProfileVelocity.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.setHandJointsMaxProfileVelocity.restype = c_int
    ret = api_mod.setHandJointsMaxProfileVelocity(maxVel, ip.encode("utf-8"))
    return message(ret)


def getHandJointsMaxProfileVelocity(ip=""):
    maxVel = DOUBLE_ARRAY_16()
    api_mod.getHandJointsMaxProfileVelocity.argtypes = [
        POINTER(DOUBLE_ARRAY_16),
        c_char_p,
    ]
    api_mod.getHandJointsMaxProfileVelocity.restype = c_int
    ret = api_mod.getHandJointsMaxProfileVelocity(maxVel, ip.encode("utf-8"))
    return message(ret), np.array(maxVel)


def setHandJointsMaxAcceleration(maxAcc, ip=""):
    api_mod.setHandJointsMaxAcceleration.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.setHandJointsMaxAcceleration.restype = c_int
    ret = api_mod.setHandJointsMaxAcceleration(maxAcc, ip.encode("utf-8"))
    return message(ret)


def getHandJointsMaxAcceleration(ip=""):
    maxAcc = DOUBLE_ARRAY_16()
    api_mod.getHandJointsMaxAcceleration.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.getHandJointsMaxAcceleration.restype = c_int
    ret = api_mod.getHandJointsMaxAcceleration(maxAcc, ip.encode("utf-8"))
    return message(ret), np.array(maxAcc)


def setHandJointsMaxDeceleration(maxDec, ip=""):
    api_mod.setHandJointsMaxDeceleration.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.setHandJointsMaxDeceleration.restype = c_int
    ret = api_mod.setHandJointsMaxDeceleration(maxDec, ip.encode("utf-8"))
    return message(ret)


def getHandJointsMaxDeceleration(ip=""):
    maxDec = DOUBLE_ARRAY_16()
    api_mod.getHandJointsMaxDeceleration.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.getHandJointsMaxDeceleration.restype = c_int
    ret = api_mod.getHandJointsMaxDeceleration(maxDec, ip.encode("utf-8"))
    return message(ret), np.array(maxDec)


def calibrateHandMechanicalZeroPosition(jointIndex, ip=""):
    api_mod.calibrateHandMechanicalZeroPosition.argtypes = [c_int, c_char_p]
    api_mod.calibrateHandMechanicalZeroPosition.restype = c_int
    ret = api_mod.calibrateHandMechanicalZeroPosition(jointIndex, ip.encode("utf-8"))
    return message(ret)


def calibrateHandTorqueSensorZero(jointIndex, ip=""):
    api_mod.calibrateHandTorqueSensorZero.argtypes = [c_int, c_char_p]
    api_mod.calibrateHandTorqueSensorZero.restype = c_int
    ret = api_mod.calibrateHandTorqueSensorZero(jointIndex, ip.encode("utf-8"))
    return message(ret)


def saveHandJointParameters(ip=""):
    api_mod.saveHandJointParameters.argtypes = [c_char_p]
    api_mod.saveHandJointParameters.restype = c_int
    ret = api_mod.saveHandJointParameters(ip.encode("utf-8"))
    return message(ret)


def setPerceptualSensorDataType(dataType, ip=""):
    api_mod.setPerceptualSensorDataType.argtypes = [c_int, c_char_p]
    api_mod.setPerceptualSensorDataType.restype = c_int
    ret = api_mod.setPerceptualSensorDataType(dataType.value, ip.encode("utf-8"))
    return message(ret)


def getPerceptualSensorData(ip=""):
    PERCEPT_TYPE = c_int8 * 540
    data = PERCEPT_TYPE()
    api_mod.getPerceptualSensorData.argtypes = [POINTER(PERCEPT_TYPE), c_int, c_char_p]
    api_mod.getPerceptualSensorData.restype = c_int
    data_type = TOUCH_SENSOR_DATA_TYPE.TOUCH_SENSOR_DATA_TYPE_RAW.value
    ret = api_mod.getPerceptualSensorData(data, data_type, ip.encode("utf-8"))
    return message(ret), np.array(data)


def handEnablePassThrough(enable, step_cnt=0, memCnt=0, getDataPeriod=1, ip=""):
    api_mod.handEnablePassThrough.argtypes = [c_bool, c_uint, c_uint, c_uint, c_char_p]
    api_mod.handEnablePassThrough.restype = c_int
    ret = api_mod.handEnablePassThrough(
        enable, step_cnt, memCnt, getDataPeriod, ip.encode("utf-8")
    )
    return message(ret)


# From PassThroughApi.h
def passthroughHandJoints(position, ip=""):
    positions_array = DOUBLE_ARRAY_16(*position)
    api_mod.passthroughHandJoints.argtypes = [POINTER(DOUBLE_ARRAY_16), c_char_p]
    api_mod.passthroughHandJoints.restype = c_int
    ret = api_mod.passthroughHandJoints(positions_array, ip.encode("utf-8"))
    return message(ret)
