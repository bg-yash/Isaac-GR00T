# Generated by ChatGPT
from ctypes import *
import sys

import numpy as np

from .load_api import load_api

api_mod = None
try:
    api_mod = load_api("WaistApi")
except OSError as e:
    print("Failed to load WaistApi library. Continuing without it...")
    pass

ERROR_CODE_MESSAGES = {
    0: "No error",
    -1: "No error",
    -2101: "ECODE_COMMUNICATE_ERROR",
    -2001: "ECODE_JOINT_REGIST_EROR",
    -2205: "ECODE_NOT_ALL_AT_OP_STATE",
}


# convert return values
def message(ret):
    if ret >= 0:
        return True
    else:
        errorcode = getWaistLastError()
        errorMessage = ERROR_CODE_MESSAGES.get(errorcode)
        callerName = "function " + sys._getframe().f_back.f_code.co_name + " fails,"
        if errorMessage is None:
            print(callerName + f"Error Code {errorcode}. (message missing!!!)")
        else:
            print(callerName + errorMessage)
        return False


# Enums
from enum import Enum


# From WaistStateDef.h
class WAIST_STATE_INFO(Structure):
    __fields__ = [
        ("joint_count", c_int8),
        ("servo_state", c_int8 * 2),
        ("joints_position", c_double * 2),
        ("joints_velocity", c_double * 2),
        ("joints_error", c_int32 * 2),
    ]


# From RobotApiDef.h
class WAIST_SRV_NET_ST(Structure):
    _fields_ = [
        ("SrvIp", c_char * 32),
        ("LocHeartbeatPort", c_ushort),
        ("LocRobotStatePort", c_ushort),
        ("LocSrvPort", c_ushort),
        ("LocRealtimeSrvPort", c_ushort),
    ]


FNCERRORCALLBACK = CFUNCTYPE(None, c_int, c_char_p)
FNCWARNINGCALLBACK = CFUNCTYPE(None, c_int, c_char_p)
WAISTFNCSTATECALLBACK = CFUNCTYPE(None, POINTER(WAIST_STATE_INFO), c_char_p)


# Functions
def initWaistSrv(srv_net_st: tuple, fn_error=None, fn_warning=None, fn_state=None):
    pinfo = WAIST_SRV_NET_ST()
    pinfo.SrvIp = srv_net_st[0].encode("utf-8")
    pinfo.LocHeartbeatPort = srv_net_st[1]
    pinfo.LocRobotStatePort = srv_net_st[2]
    pinfo.LocSrvPort = srv_net_st[3]
    pinfo.LocRealtimeSrvPort = srv_net_st[4]
    api_mod.initWaistSrv.argtypes = [
        POINTER(WAIST_SRV_NET_ST),
        FNCERRORCALLBACK,
        FNCWARNINGCALLBACK,
        WAISTFNCSTATECALLBACK,
    ]
    if fn_error is None:
        fn_error = FNCERRORCALLBACK()
    if fn_warning is None:
        fn_warning = FNCWARNINGCALLBACK()
    if fn_state is None:
        fn_state = WAISTFNCSTATECALLBACK()
    ret = api_mod.initWaistSrv(byref(pinfo), fn_error, fn_warning, fn_state)
    return message(ret)


# ROBOT_API int getWaistLastError(const char *strIpAddress = "");
def getWaistLastError(ip=""):
    api_mod.getWaistLastError.argtypes = [c_char_p]
    api_mod.getWaistLastError.restype = c_int
    ret = api_mod.getWaistLastError(ip.encode("utf-8"))
    return ret


# ROBOT_API int waistCleanError(const char *strIpAddress = "");
def waistCleanError(ip=""):
    ret = api_mod.waistCleanError(ip.encode("utf-8"))
    return message(ret)


# ROBOT_API int getWaistJointsPosition(/*out[2]*/ double *positions, const char *strIpAddress = "");
def getWaistJointsPosition(ip=""):
    if api_mod is None:
        print("[WARN] WaistApi not loaded, returning default positions.")
        return 0, np.deg2rad([0.0, 45])
    positions = (c_double * 2)()
    api_mod.getWaistJointsPosition.argtypes = [POINTER(c_double), c_char_p]
    api_mod.getWaistJointsPosition.restype = c_int
    ret = api_mod.getWaistJointsPosition(positions, ip.encode("utf-8"))
    return ret, np.array(positions)


# ROBOT_API int waistMoveJoint(uint8_t jointIndex, double position, double velPercent, double accPercent, const char *strIpAddress = "");
def waistMoveJoint(jointIndex, position, velPercent, accPercent, ip=""):
    api_mod.waistMoveJoint.argtypes = [
        c_int8,
        c_double,
        c_double,
        c_double,
        c_char_p,
    ]
    api_mod.waistMoveJoint.restype = c_int
    ret = api_mod.waistMoveJoint(
        jointIndex, position, velPercent, accPercent, ip.encode("utf-8")
    )
    return message(ret)


# ROBOT_API int waistEnableServo(uint8_t joint, bool enable, const char *strIpAddress = "");
def waistEnableServo(joint, enable, ip=""):
    api_mod.waistEnableServo.argtypes = [c_int8, c_bool, c_char_p]
    ret = api_mod.waistEnableServo(joint, enable, ip.encode("utf-8"))
    return message(ret)
